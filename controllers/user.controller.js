const User = require('../models/user.model')
const bcrypt = require('bcryptjs')

exports.getUsers =  async (req, res)=>{
  try {
    if(req.query.name){
/*1*/const users = await User.find({ name: { '$regex': `.*${req.query.name}.*`, '$options': 'i' }}) 
      res.send(users)
    }else{
     const users = await User.find({})
      res.send(users)
    }
  
  } catch (error) {
    console.log(error)
    res.send(error.message)
  }
}
/*2: entender a l√≥gica do c√≥digo*/
exports.getUser =  async (req, res)=>{
  try {
    const id = req.params.id
    const user = await User.findById(id)
    res.send(user)
  } catch (error) {
    console.log(error)
    res.send(error.message)
  }
}

exports.createUser =  async (req,res)=> {
  try {
    const data = req.body;
    data.password = await bcrypt.hashSync(data.password, 10);
    const user = await User.create(data)
    // users.push(req.body)
      res.send(user)
  } catch (error) {
    console.log(error)
    res.send(error.message)
  }
}

exports.updateUser =  async (req,res)=> {
  try {
    const id = req.params.id;
    const data = await User.findByIdAndUpdate(id, req.body, {new: true}) 
    res.send(data)
  } catch (error) {
    console.log(error)
    res.send(error.message)
  }
}

exports.deleteUser =  async (req,res) => {
  try {
    const id = req.params.id;
    const data = await User.findByIdAndRemove(id)
    res.send(data)
  } catch (error) {
    console.log(error)
    res.send(error.message)
  }
}

/*
EXPRESS√ÉO REGULAR:
const users = await User.find({ name: { '$regex': `.*${req.query.name}.*`, '$options': 'i' }}) 

üîÅ Em termos simples:
User.find({
  name: {
    $regex: `.*${req.query.name}.*`,
    $options: 'i'
  }
})
Significa:
‚ÄúProcure no banco de dados todos os usu√°rios cujo campo name contenha a string vinda de req.query.name (ignorando letras mai√∫sculas ou min√∫sculas).‚Äù

üìå name ‚Üí √© o nome do campo nos documentos do MongoDB
üìå req.query.name ‚Üí √© o valor que o usu√°rio passou na URL

üìå 2. Por que $regex e $options t√™m um cifr√£o $ antes?
üí° Isso vem da sintaxe do MongoDB.
MongoDB usa operadores especiais com prefixo $ para indicar que n√£o s√£o simples valores literais, mas comandos ou instru√ß√µes.


‚úÖ O que √© .*${req.query.name}.*?
Essa √© uma string interpolada (template string do JavaScript), que est√° sendo usada para montar uma express√£o regular dinamicamente, baseada no valor que o usu√°rio envia pela URL.

üí° A fun√ß√£o de .* em uma regex
. ‚Üí significa "qualquer caractere" (exceto quebras de linha).
* ‚Üí significa "zero ou mais vezes".
Juntos, .* ‚Üí qualquer sequ√™ncia de caracteres, inclusive nenhuma.

üîç Por que tem dois .*?
A express√£o:
`.*${req.query.name}.*`
Serve para encontrar qualquer valor que contenha a string fornecida, em qualquer posi√ß√£o do campo name.

Exemplo
Se o usu√°rio envia:
GET /users?name=jo
A linha:
`.*${req.query.name}.*`
Vira:
.*jo.*
Ou seja, est√° procurando qualquer texto que tenha "jo" em qualquer parte.

Vai bater com:
"Jo√£o"
"Marjory"
"Jorge"
"Sojo"

‚ùì E se n√£o usasse .*?
Se usasse s√≥:
regex: `${req.query.name}`
Voc√™ estaria buscando apenas nomes que sejam exatamente iguais a "jo".
Ou seja, n√£o encontraria "Jo√£o" nem "Marjory".

Se usasse:
regex: `^${req.query.name}`
O ^ significa "come√ßa com".

Isso encontraria nomes que comecem com "jo":

"Jo√£o" ‚úÖ
"Jorge" ‚úÖ
"Marjory" ‚ùå

Se usasse:
regex: `${req.query.name}$`
O $ significa "termina com".
Isso encontraria nomes que terminam com "jo".

‚úÖ Conclus√£o
A forma:
`.*${req.query.name}.*`
√â usada porque √© a maneira mais ampla de procurar:
‚Äúqualquer nome que contenha essa string em qualquer posi√ß√£o‚Äù.
Isso garante uma busca parecida com o comportamento de ‚Äúpesquisa de substring‚Äù ‚Äî que √© o mais comum em sistemas de busca simples.

*/




/* 2. L√ìGICA DO C√ìDIGO:
üìå Primeiro, aqui est√° o trecho que estamos analisando:
 useEffect(() => {
   getUsers();
}, [search]);

‚úÖ O que √© useEffect?
 O useEffect √© um Hook do React que permite executar efeitos colaterais no seu componente ‚Äî como:
   - Fazer chamadas a APIs (como fetch)
   - Atualizar o t√≠tulo da p√°gina
   - Adicionar ou remover eventos

‚úÖ Como funciona esse useEffect(() => { getUsers(); }, [search])?
Vamos quebrar isso em partes:
 üìç () => { getUsers(); }
   √â uma fun√ß√£o de efeito: o que voc√™ quer que o React execute quando algo acontecer.
   Neste caso, a fun√ß√£o simplesmente chama getUsers() ‚Äî ou seja, busca os dados do servidor.

üìç [search]
√â o array de depend√™ncias. Ele diz ao React:
   ‚ÄúExecute essa fun√ß√£o toda vez que search mudar‚Äù.
   Se voc√™ deixar o array vazio [], ele roda s√≥ uma vez (quando o componente monta).
   Se voc√™ colocar [search], ele roda toda vez que o search for atualizado (como quando voc√™ digita no input de busca).

üîÅ Ciclo de funcionamento:
   1. O componente √© carregado:
     search √© "" (vazio)
     useEffect roda porque o componente montou
     getUsers() √© chamado com filtro vazio (http://localhost:3000/api/users)

2. O usu√°rio digita algo:
 Exemplo: "jo√£o"
   O onChange do input dispara ‚Üí setSearch("jo√£o")
   O valor de search muda

3. Como search mudou:
 1) O React percebe que search mudou
 2) Ele executa novamente o useEffect
 3) O useEffect chama getUsers() de novo
   Agora a URL √©:
     http://localhost:3000/api/users?name=jo√£o

üß† Conclus√£o
 O useEffect(() => { getUsers(); }, [search]) est√° dizendo ao React:

   "Sempre que o valor de search mudar, execute getUsers() para buscar os dados atualizados."
   Isso torna sua busca reativa e em tempo real, com base no que o usu√°rio digita.


*/